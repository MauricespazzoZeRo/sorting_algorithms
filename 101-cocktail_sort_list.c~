#include "sort.h"

/**
 * cocktail_sort_list - Sorts a doubly linked list of integers in ascending
 *					   order using the Cocktail Shaker Sort algorithm.
 * @list: Pointer to a pointer to the head of the list.
 */
void cocktail_sort_list(listint_t **list)
{
	int swapped;
	listint_t *start = NULL, *end = NULL, *current = NULL;

	if (list == NULL || *list == NULL)
		return;

	do
	{
		swapped = 0;
		current = *list;

		while (current->next != end)
		{
			if (current->n > current->next->n)
			{
				swap_nodes(&current, &current->next, list);
				print_list(*list);
				swapped = 1;
			}
			else
			{
				current = current->next;
			}
		}

		if (!swapped)
			break;

		swapped = 0;
		end = current;

		while (current->prev != start)
		{
			if (current->n < current->prev->n)
			{
				swap_nodes(&current, &current->prev, list);
				print_list(*list);
				swapped = 1;
			}
			else
			{
				current = current->prev;
			}
		}
		start = current;
	}
	while (swapped);
}

/**
 * swap_nodes - Swaps two adjacent nodes in a doubly linked list.
 * @left: Pointer to the left node.
 * @right: Pointer to the right node.
 * @list: Pointer to a pointer to the head of the list.
 */

void swap_nodes(listint_t **left, listint_t **right, listint_t **list)
{
	listint_t *tmp = NULL;

	if (*left == NULL || *right == NULL)
		return;

	tmp = (*left)->prev;
	(*left)->prev = (*right)->prev;
	(*right)->prev = tmp;

	if ((*left)->prev != NULL)
		(*left)->prev->next = *left;
	else
		*list = *left;

	if ((*right)->prev != NULL)
		(*right)->prev->next = *right;

	tmp = (*left)->next;
	(*left)->next = (*right)->next;
	(*right)->next = tmp;

	if ((*left)->next != NULL)
		(*left)->next->prev = *left;

	if ((*right)->next != NULL)
		(*right)->next->prev = *right;
}
